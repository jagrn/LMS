@model LMS.ViewModels.ActivityViewModel

@{
    ViewBag.Title = "Manage";
}

@{
    var activityId = Model.Id;
    var moduleId = Model.ModuleId;
    var courseId = Model.CourseId;

    var activityName = Model.Name;      // TEST
    var headBannerInfo = "Hantera aktiviteter för modulen " + @Model.ModuleName;
}

@{ 
    string showDocuments = "'false'";
    if (Model.ShowDocuments)
    {
        showDocuments = "'true'";
    }
}

@Html.Action("HeadBanner", "CommonLOs", new { origin = "ActivityMgmnt", id1 = Model.CourseId, id2 = Model.ModuleId, id3 = Model.Id, infoText = headBannerInfo })


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

            <div class="container">
                <div class="row">

                    <div class="col-md-3">
                        <!--menu-->
                       
                        <h4 class="page-header">Aktiviteter</h4>
                        @{
                            <a class="btn btn-sm greenButton btnFlip" href="@Url.Action("Manage", "Modules", new { Id = moduleId, courseId = Model.CourseId, getOperation = "LoadMini" })">v</a>
                            if (activityId != 0)
                            {
                                <a class="btn btn-sm greenButton alignActBtnXRight" href="@Url.Action("Manage", "Activities", new { id = 0, moduleId = Model.ModuleId, courseId = Model.CourseId, getOperation = "New", viewMessage = "" })">+</a>
                                <a class="btn btn-sm redButton alignActBtnXRight" href="@Url.Action("Delete", "Activities", new { id = activityId, moduleId = Model.ModuleId, courseId = Model.CourseId, deleteType = "Single" })">-</a>
                            }
                        }
                        <ul class="nav nav-pills nav-stacked">
                        @foreach (var activity in Model.ModuleActivities)
                        {
                            if (activity.Id == Model.Id)
                            {                              
                                    <li class="active">@Html.ActionLink(activity.Name, "Manage", new { id = activity.Id, moduleId = Model.ModuleId, courseId = Model.CourseId, getOperation = "Load" })</li>                             
                            }
                            else
                            {
                                    <li>@Html.ActionLink(activity.Name, "Manage", new { id = activity.Id, moduleId = Model.ModuleId, courseId = Model.CourseId, getOperation = "Load" })</li>
                            }
                        }
                        </ul>
                    </div><!--end menu-->

                    <div class="form-horizontal col-md-6">

                        @{
                            if (activityId == 0)
                            {
                                <h4 class="page-header">Skapa ny aktivitet</h4>
                            }
                            else
                            {
                                <h4 class="page-header">Redigera aktiviteten @Model.Name</h4>
                            }
                        }

                        @{
                            if (Model.PostMessage != "")
                            {
                                <h5 class="text-danger">@Model.PostMessage</h5>
                            }
                        }
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Id)
                        @Html.HiddenFor(model => model.PostNavigation)
                        @Html.HiddenFor(model => model.PostOperation)
                        @Html.HiddenFor(model => model.PostMessage)
                        @Html.HiddenFor(model => model.CourseId)
                        @Html.HiddenFor(model => model.ModuleId)
                        @Html.HiddenFor(model => model.ShowDocuments)


                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-9" style="margin-left:20px;">

                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control " } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-9" style="margin-left:20px;">

                                @Html.TextAreaFor(model => model.Description, 6, 40, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-9" style="margin-left:20px;">

                                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Period, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-9" style="margin-left:20px;">
                                @Html.EnumDropDownListFor(model => model.Period, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Period, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectActivityType, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-9" style="margin-left:20px;">
                                @Html.EnumDropDownListFor(model => model.SelectActivityType, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SelectActivityType, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        
                        <div class="btn-toolbar col-md-offset-2">

                            <!-- icons-->
                            @{
                                if (activityId != 0)
                                {
                                    @*<button type="submit" class="btn btn-default" onclick="PostConfig('Save', 'Update', @activityId, 0)" aria-label="Left Align">
                                        <span class="glyphicon glyphiconsm glyphicon-save" aria-hidden="true"></span><br />Updatera
                                    </button>*@

                                    <button type="submit" class="btn btn-sm saveButton" onclick="ActivityPostConfig('Save', 'Update', @activityId, @showDocuments)" aria-label="Left Align">
                                        Uppdatera
                                    </button>
                                }
                                else
                                {
                                    @*<button type="submit" class="btn btn-default" onclick="PostConfig('Save', 'New', @activityId, 0)" aria-label="Left Align">
                                        <span class="glyphicon glyphiconsm glyphicon-save" aria-hidden="true"></span><br />Spara
                                    </button>*@

                                    <button type="submit" class="btn btn-sm saveButton" onclick="ActivityPostConfig('Save', 'New', @activityId, @showDocuments)" aria-label="Left Align">
                                        Spara
                                    </button>
                                }
                            }

                            
                            @{
                                if (activityId != 0)
                                {

                                    @*<button type="button" class="btn btn-default" aria-label="Left Align">

                                        <span class="glyphicon glyphiconsm glyphicon-file" aria-hidden="true"></span><br />Nytt dokument
                                    </button>*@
                                    
                                }
                            }
                            @*<a class="btn btn-default" href="@Url.Action("Manage", "Modules", new { Id = Model.ModuleId,courseId = Model.CourseId, getOperation = "Load" }, null)"> <span class="glyphicon glyphiconsm glyphicon-circle-arrow-left" aria-hidden="true"></span><br />Tillbaka</a>*@
                            <br />

                        </div><!-- end icons-->

                        

                        <div>
                            @Html.Partial("_ActivityDocuments")
                        </div>

                    </div>

                    <div class="col-md-3">
                        <h4 class="page-header">Lediga aktivitetsblock</h4>
                        @{
                            string baseDate = "";
                            string date = "";
                            string periodsWithSpace = "";
                            int noOfPeriods = Model.AvailableTime.Count;

                            if (noOfPeriods > 0)
                            {
                                baseDate = Model.AvailableTime.First().Start.ToShortDateString();
                                date = baseDate;
                            }

                            int period = 0;
                            while (period < noOfPeriods)
                            {
                                <div class="listElement">
                                    <p>@baseDate</p>
                                    @{
                                        while (date == baseDate)
                                        {

                                            periodsWithSpace += Model.AvailableTime.ElementAt(period).Period.ToString() + " ";
                                            period++;
                                            if (period < noOfPeriods)
                                            {
                                                date = Model.AvailableTime.ElementAt(period).Start.ToShortDateString();
                                            }
                                            else
                                            {
                                                date = "";
                                            }
                                        }

                                    }
                                    <p>@periodsWithSpace</p>
                                </div>
                                baseDate = date;
                                periodsWithSpace = "";
                            }
                        }
                                    
                    </div>
                </div>
            </div>
            }


            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }

